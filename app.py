import os
import json
import logging
import requests
from flask import Flask, request
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# üîê –°–µ–∫—Ä–µ—Ç—ã
VK_CONFIRMATION = os.getenv("VK_CONFIRMATION")
VK_SECRET = os.getenv("VK_SECRET")
FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")

# üóÇÔ∏è –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è SKU (–í–ö) -> –ê—Ä—Ç–∏–∫—É–ª (FrontPad)
ARTICLES = {f"{i:03}": f"{i:03}" for i in range(1, 182)}

@app.route("/", methods=["POST"])
def vk_callback():
    try:
        data = request.get_json(force=True)
        logging.info(f"üì• JSON –æ—Ç –í–ö:\n{json.dumps(data, ensure_ascii=False, indent=2)}")

        # üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        if data.get("type") == "confirmation":
            return VK_CONFIRMATION

        # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
        if data.get("secret") != VK_SECRET:
            logging.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –æ—Ç –í–ö")
            return "not ok"

        # üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
        if data.get("type") == "market_order_new":
            order = data["object"]
            customer = order.get("recipient", {})
            items = order.get("preview_order_items", [])

            logging.info(f"üßæ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ –í–ö: {json.dumps(items, ensure_ascii=False, indent=2)}")

            products = []
            for item in items:
                sku = item.get("item", {}).get("sku")
                quantity = item.get("quantity", 1)
                article = ARTICLES.get(sku)

                logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SKU: {sku}, –ö–æ–ª-–≤–æ: {quantity}, –ê—Ä—Ç–∏–∫—É–ª: {article}")

                if article:
                    products.append({"article": article, "quantity": quantity})
                else:
                    logging.warning(f"‚ùå SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤!")

            if not products:
                logging.error("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
                return "ok"

            # üìû –ö–ª–∏–µ–Ω—Ç
            phone = customer.get("phone", "")
            name = customer.get("name", "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            address = order.get("delivery", {}).get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
            comment = order.get("comment", "")

            payload = {
                "secret": FRONTPAD_SECRET,
                "action": "new_order",
                "phone": phone,
                "name": name,
                "delivery_address": address,
                "comment": comment,
                "products": json.dumps(products, ensure_ascii=False)
            }

            logging.info(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: {payload}")

            response = requests.post("https://app.frontpad.ru/api/index.php", data=payload)
            try:
                response_data = response.json()
            except Exception:
                response_data = response.text
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞: {response_data}")

            logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad: {response_data}")
            return "ok"

        return "ok"

    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return "error"

