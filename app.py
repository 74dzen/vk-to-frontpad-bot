import os
import logging
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import requests

load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

FRONTPAD_SECRET = os.getenv('FRONTPAD_SECRET')
VK_CONFIRMATION = os.getenv('VK_CONFIRMATION')

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: SKU –í–ö–æ–Ω—Ç–∞–∫—Ç–µ = –ê—Ä—Ç–∏–∫—É–ª FrontPad (–≤—Å–µ –æ—Ç 001 –¥–æ 181)
sku_to_article = {f"{i:03}": f"{i:03}" for i in range(1, 182)}

@app.route('/', methods=['POST'])
def vk_callback():
    data = request.json

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    if data.get('type') == 'confirmation':
        return VK_CONFIRMATION

    if data.get('type') == 'market_order_new':
        order = data['object']
        user_name = order['recipient']['name']
        user_phone = order['recipient']['phone']
        user_address = order['delivery']['address']
        comment = order['comment']

        products = []
        for item in order.get('preview_order_items', []):
            sku = item.get('item', {}).get('sku')
            quantity = item.get('quantity', 1)
            if sku in sku_to_article:
                products.append({
                    "article": sku_to_article[sku],
                    "quantity": quantity
                })
            else:
                logging.warning(f"‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π SKU: {sku}")

        if not products:
            logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
            return "ok"

        payload = {
            "secret": FRONTPAD_SECRET,
            "action": "new_order",
            "phone": user_phone,
            "name": user_name,
            "delivery_address": user_address,
            "comment": comment,
            "products": products  # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π ‚Äî –Ω–µ JSON-—Å—Ç—Ä–æ–∫–∞!
        }

        logging.info(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: {payload}")
        response = requests.post("https://app.frontpad.ru/api/index.php", json=payload)
        try:
            response_data = response.json()
        except Exception:
            logging.error(f"‚ùå FrontPad –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {response.text}")
            return "ok"

        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad: {response_data}")
        if response_data.get("result") != "success":
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç FrontPad: {response_data.get('error')}")

    return "ok"
