import os
import json
import logging
from flask import Flask, request
from dotenv import load_dotenv
import requests

load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

VK_CONFIRMATION = os.getenv("VK_CONFIRMATION")
FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")
FRONTPAD_URL = "https://app.frontpad.ru/api/index.php"

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π SKU ‚Üí –∞—Ä—Ç–∏–∫—É–ª
sku_to_article = {f"{i:03}": f"{i:03}" for i in range(1, 182)}  # 001‚Äì181

@app.route("/", methods=["POST"])
def vk_callback():
    data = request.json
    logging.info(f"üì© –í—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –í–ö: {data}")

    if "type" not in data:
        logging.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return "ok"

    if data["type"] == "confirmation":
        return VK_CONFIRMATION

    if data["type"] == "market_order_new":
        order_data = data.get("object", {})
        items = order_data.get("items", [])
        logging.info(f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ: {items}")

        products = []
        for item in items:
            sku = str(item.get("sku", "")).strip()
            quantity = int(item.get("quantity", 1))

            article = sku_to_article.get(sku)
            if article:
                products.append({"article": article, "quantity": quantity})
            else:
                logging.warning(f"‚ùå –ù–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è SKU: {sku}")

        if not products:
            logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
            return "ok"

        payload = {
            "secret": FRONTPAD_SECRET,
            "action": "new_order",
            "phone": "+79999999999",
            "name": "–£–∞—Å—è—è—è—è—è—è –£–∞—Å—è—è—è—è—è—è—è",
            "delivery_address": "–ß–µ–ª—è–±–∏–Ω—Å–∫",
            "comment": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ)",
            "products": json.dumps(products, ensure_ascii=False),
        }

        logging.info(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: {payload}")
        try:
            response = requests.post(FRONTPAD_URL, data=payload, timeout=10)
            response_data = response.json() if response.content else None
            logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad: {response_data}")

            if not response_data:
                logging.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç FrontPad!")
            elif response_data.get("result") != "success":
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç FrontPad: {response_data.get('error')}")

        except Exception as e:
            logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ FrontPad")

    return "ok"

