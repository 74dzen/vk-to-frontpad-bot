import os
import logging
import json
import requests
from flask import Flask, request
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")
VK_SECRET = os.getenv("VK_SECRET")
VK_CONFIRMATION = os.getenv("VK_CONFIRMATION")

# –í—Å–µ 181 —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º = SKU
ARTICLE_MAP = {f"{i:03}": f"{i:03}" for i in range(1, 182)}

@app.route("/", methods=["POST"])
def vk_callback():
    data = request.get_json(force=True)
    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç VK:\n{json.dumps(data, indent=2, ensure_ascii=False)}")

    if data.get("type") == "confirmation":
        return VK_CONFIRMATION

    if data.get("secret") != VK_SECRET:
        logging.warning("‚ùå –°–µ–∫—Ä–µ—Ç –æ—Ç VK –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
        return "not ok"

    if data.get("type") == "market_order_new":
        order = data.get("object", {})

        recipient = order.get("recipient", {})
        delivery = order.get("delivery", {})
        items = order.get("preview_order_items", [])

        name = recipient.get("name", "")
        phone = recipient.get("phone", "")
        address = delivery.get("address", "")
        comment = order.get("comment", "")

        products_list = []
        for item in items:
            sku = item.get("item", {}).get("sku")
            quantity = item.get("quantity", 1)

            if not sku:
                logging.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω SKU —É —Ç–æ–≤–∞—Ä–∞: {item}")
                continue

            article = ARTICLE_MAP.get(sku)
            if not article:
                logging.warning(f"‚ùå SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤!")
                continue

            products_list.append({
                "article": article,
                "quantity": quantity
            })

        if not products_list:
            logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
            return "ok"

        # –ì–æ—Ç–æ–≤–∏–º —Å—Ç—Ä–æ–∫—É —Å JSON —Ç–æ–≤–∞—Ä–æ–≤
        products_json = json.dumps(products_list, ensure_ascii=False)

        payload = {
            "secret": FRONTPAD_SECRET,
            "action": "new_order",
            "phone": phone,
            "name": name,
            "delivery_address": address,
            "comment": comment,
            "products": products_json  # –í–∞–∂–Ω–æ: —Å—Ç—Ä–æ–∫–∞!
        }

        logging.info(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: {payload}")

        try:
            response = requests.post("https://app.frontpad.ru/api/index.php", data=payload)
            logging.info(f"üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad: {response.status_code}")
            logging.info(f"üì§ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad (text): {response.text}")
            try:
                json_data = response.json()
                logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad (json): {json_data}")
            except Exception:
                logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad")
        except Exception as e:
            logging.exception(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ FrontPad: {e}")

    return "ok"
