import os
import logging
from flask import Flask, request
from dotenv import load_dotenv
import requests
import json

load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")
VK_SECRET = os.getenv("VK_SECRET")

@app.route("/", methods=["POST"])
def vk_callback():
    data = request.get_json()
    logging.info("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: %s", json.dumps(data, ensure_ascii=False, indent=2))

    if data.get("type") in ["market_order_new", "market_order_edit"] and data.get("secret") == VK_SECRET:
        order = data.get("object", {})
        recipient = order.get("recipient", {})
        delivery = order.get("delivery", {})
        comment = order.get("comment", "")

        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ preview_order_items
        items = order.get("preview_order_items", [])
        logging.info(f"üî¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}")

        phone = recipient.get("phone", "").strip()
        name = recipient.get("name", "").strip()
        address = delivery.get("address", "").strip()

        if not phone or not name or not address:
            logging.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∞–¥—Ä–µ—Å")
            return "error"

        payload = {
            "secret": FRONTPAD_SECRET,
            "phone": phone,
            "name": name,
            "delivery_address": address,
            "comment": comment
        }

        for i, item in enumerate(items):
            logging.info(f"\nüß© –¢–æ–≤–∞—Ä #{i} –ø–æ–ª–Ω—ã–π: {json.dumps(item, ensure_ascii=False)}")

            if not isinstance(item, dict):
                logging.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–∞ #{i}: {item}")
                continue

            item_data = item.get("item", item)  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã {item: {sku:...}} –∏ –ø—Ä–æ—Å—Ç–æ {sku:...}
            sku = str(item_data.get("sku", "")).strip()
            qty = int(item.get("quantity", 1))

            logging.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–≤–∞—Ä #{i}: sku='{sku}', qty={qty}")

            if not sku:
                logging.warning(f"‚õîÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä #{i} ‚Äî –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SKU")
                continue

            payload[f"product[{i}]"] = sku
            payload[f"product_kol[{i}]"] = qty
            logging.info(f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑: {sku} x{qty}")

        logging.info("\nüì§ –ü–æ–ª–Ω—ã–π payload –¥–ª—è FrontPad:")
        for key, value in payload.items():
            logging.info(f"    {key}: {value}")

        logging.info("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad...")

        try:
            response = requests.post("https://app.frontpad.ru/api/index.php?new_order", data=payload)
            logging.info("üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: %s", response.status_code)
            logging.info("üì§ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: %s", response.text)

            if response.status_code == 200 and response.text != "null":
                logging.info("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤–æ FrontPad.")
            else:
                logging.error("‚ùå –û—à–∏–±–∫–∞: FrontPad –≤–µ—Ä–Ω—É–ª null. –ü—Ä–æ–≤–µ—Ä—å –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ API-–∫–ª—é—á.")

            return "ok"
        except Exception as e:
            logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ FrontPad:")
            return "error"

    return "ok"
