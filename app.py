import os
import json
import logging
import requests
from flask import Flask, request
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# üîê –°–µ–∫—Ä–µ—Ç—ã
VK_CONFIRMATION = os.getenv("VK_CONFIRMATION")
VK_SECRET = os.getenv("VK_SECRET")
FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")

# –¢–∞–±–ª–∏—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: "001"‚Äì"181"
ARTICLES = {f"{i:03}": f"{i:03}" for i in range(1, 182)}

@app.route("/", methods=["POST"])
def vk_callback():
    data = request.get_json(force=True)
    logging.info(f"üì• –í–µ—Å—å JSON –æ—Ç –í–ö:\n{json.dumps(data, ensure_ascii=False, indent=2)}")

    # üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    if data.get("type") == "confirmation":
        return VK_CONFIRMATION

    # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    if data.get("secret") != VK_SECRET:
        logging.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –æ—Ç –í–ö")
        return "not ok"

    # üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    if data.get("type") == "market_order_new":
        order = data.get("object", {})
        customer = order.get("customer", {})
        raw_items = order.get("preview_order_items") or order.get("items") or {}
        logging.info(f"üßæ raw_items:\n{json.dumps(raw_items, ensure_ascii=False, indent=2)}")
        items = list(raw_items.values()) if isinstance(raw_items, dict) else raw_items

        if not items:
            logging.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ")
            return "ok"

        product_data = {}
        product_count = 0

        for idx, item in enumerate(items):
            sku = item.get("sku")
            quantity = item.get("quantity", 1)
            article = ARTICLES.get(sku)

            if not article:
                logging.warning(f"‚ùå SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤!")
                continue

            product_data[f"product[{product_count}]"] = article
            product_data[f"product_kol[{product_count}]"] = str(quantity)
            product_count += 1

        if product_count == 0:
            logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
            return "ok"

        # –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        name = f"{customer.get('first_name', '')} {customer.get('last_name', '')}".strip()
        phone = customer.get("phone", "")
        comment = order.get("comment", "")
        address_data = order.get("delivery_address", {})
        street = address_data.get("street", "")
        home = address_data.get("home", "")
        apart = address_data.get("apartment", "")
        city = address_data.get("city", "")

        # –°–æ–±–∏—Ä–∞–µ–º payload
        payload = {
            "secret": FRONTPAD_SECRET,
            "name": name,
            "phone": phone,
            "descr": comment,
            "street": city or "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω",
            "home": home,
            "apart": apart,
            **product_data
        }

        logging.info(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: {payload}")

        try:
            response = requests.post("https://app.frontpad.ru/api/index.php?new_order", data=payload)
            logging.info(f"üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad: {response.status_code}")
            logging.info(f"üì§ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad: {response.text}")

            try:
                response_json = response.json()
                logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad (json): {response_json}")
                if response_json.get("result") != "success":
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç FrontPad: {response_json.get('error')}")
            except Exception:
                logging.error("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")

        except Exception as e:
            logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ FrontPad: {e}")

        return "ok"

    return "ok"
