import os
import json
import logging
from flask import Flask, request
import requests
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

FRONTPAD_API_URL = "https://app.frontpad.ru/api/index.php"
FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")
CONFIRMATION_TOKEN = os.getenv("VK_CONFIRMATION")

@app.route("/", methods=["POST"])
def vk_callback():
    data = request.json
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω callback –æ—Ç VK: {json.dumps(data, ensure_ascii=False)}")

    if data.get("type") == "confirmation":
        return CONFIRMATION_TOKEN

    if data.get("type") == "market_order_new":
        order = data["object"]

        customer = order.get("customer", {})
        first_name = customer.get("first_name", "")
        last_name = customer.get("last_name", "")
        phone = customer.get("phone", "")
        full_name = f"{first_name} {last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        address = order.get("delivery_address", "")
        note = order.get("comment", "")

        items = order.get("items", [])
        if not items:
            logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
            return "ok"

        products = []
        for item in items:
            sku = item.get("sku", "").strip()
            quantity = int(item.get("quantity", 1))
            if sku and sku.isdigit():
                products.append({"article": sku, "quantity": quantity})
            else:
                logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º SKU: {sku}")

        if not products:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
            return "ok"

        payload = {
            "secret": FRONTPAD_SECRET,
            "action": "new_order",
            "phone": phone,
            "name": full_name,
            "delivery_address": address,
            "comment": note,
            "products": json.dumps(products, ensure_ascii=False),  # –í–ê–ñ–ù–û: JSON-—Å—Ç—Ä–æ–∫–∞!
        }

        logging.info(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: {payload}")

        try:
            response = requests.post(FRONTPAD_API_URL, data=payload)
            response.encoding = "utf-8"
            logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad: {response.text}")

            try:
                response_data = response.json()
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e}")
                return "ok"

            if response_data.get("result") != "success":
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç FrontPad: {response_data.get('error')}")
            else:
                logging.info("üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

        except Exception as e:
            logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ FrontPad:")

    return "ok"

@app.route("/", methods=["GET"])
def index():
    return "üëã FrontPad VK –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞."

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
