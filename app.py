import os
import json
import logging
from flask import Flask, request
import requests

app = Flask(__name__)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç FrontPad
FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è SKU -> –∞—Ä—Ç–∏–∫—É–ª FrontPad
SKU_TO_ARTICLE = {f"{i:03}": f"{i:03}" for i in range(1, 182)}  # SKU "001".."181" ‚Üí –∞—Ä—Ç–∏–∫—É–ª "001".."181"

@app.route("/", methods=["POST"])
def handle_vk_order():
    data = request.json
    logging.info("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç VK: %s", json.dumps(data, ensure_ascii=False))

    if data.get("type") != "market_order_new":
        logging.info("‚ÑπÔ∏è –ù–µ —Å–æ–±—ã—Ç–∏–µ market_order_new, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return "ok"

    order = data.get("object", {})
    recipient = order.get("recipient", {})
    delivery = order.get("delivery", {})
    items = order.get("preview_order_items", [])
    comment = order.get("comment", "")

    # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products = []
    for item in items:
        sku = item.get("item", {}).get("sku")
        logging.info(f"üîé –û–±–Ω–∞—Ä—É–∂–µ–Ω SKU: {sku}")
        if sku and sku in SKU_TO_ARTICLE:
            article = SKU_TO_ARTICLE[sku]
            quantity = item.get("quantity", 1)
            products.append({
                "article": article,
                "quantity": quantity
            })
        else:
            logging.warning(f"‚ùå SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤!")

    if not products:
        logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
        return "ok"

    payload = {
        "secret": FRONTPAD_SECRET,
        "action": "new_order",
        "phone": recipient.get("phone", ""),
        "name": recipient.get("name", ""),
        "delivery_address": delivery.get("address", ""),
        "comment": comment,
        "products": json.dumps(products, ensure_ascii=False)
    }

    logging.info("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: %s", json.dumps(payload, ensure_ascii=False))

    try:
        response = requests.post("https://app.frontpad.ru/api/index.php", data=payload)
        logging.info("üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad: %s", response.status_code)
        logging.info("üì§ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad (text): %s", response.text)
        try:
            json_response = response.json()
        except Exception:
            json_response = None
        logging.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad (json): %s", json_response)
    except Exception as e:
        logging.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ FrontPad: %s", str(e))

    return "ok"

@app.route("/", methods=["GET"])
def health():
    return "Server is running", 200
