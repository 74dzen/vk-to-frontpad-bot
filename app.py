import os
import logging
import json
import requests
from flask import Flask, request
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# –°–µ–∫—Ä–µ—Ç—ã
FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")
VK_SECRET = os.getenv("VK_SECRET")
VK_CONFIRMATION = os.getenv("VK_CONFIRMATION")

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è SKU ‚Üí –∞—Ä—Ç–∏–∫—É–ª (–≤—Å–µ –æ—Ç 001 –¥–æ 181)
ARTICLES = {f"{i:03}": f"{i:03}" for i in range(1, 182)}

@app.route("/", methods=["POST"])
def vk_callback():
    data = request.get_json(force=True)
    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:\n{json.dumps(data, indent=2, ensure_ascii=False)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    if data.get("type") == "confirmation":
        return VK_CONFIRMATION

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    if data.get("secret") != VK_SECRET:
        logging.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!")
        return "not ok"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    if data.get("type") == "market_order_new":
        order = data.get("object", {})

        recipient = order.get("recipient", {})
        delivery = order.get("delivery", {})
        items = order.get("preview_order_items", [])

        name = recipient.get("name", "")
        phone = recipient.get("phone", "")
        address = delivery.get("address", "")
        comment = order.get("comment", "")

        # –°–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
        products = []
        for item in items:
            sku = item.get("item", {}).get("sku")
            quantity = item.get("quantity", 1)

            if not sku:
                logging.warning(f"‚ùå SKU –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–≤–∞—Ä–µ: {item}")
                continue

            article = ARTICLES.get(sku)
            if not article:
                logging.warning(f"‚ùå SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ARTICLES")
                continue

            products.append({
                "article": article,
                "quantity": quantity
            })

        if not products:
            logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
            return "ok"

        # –§–æ—Ä–º–∏—Ä—É–µ–º payload
        payload = {
            "secret": FRONTPAD_SECRET,
            "action": "new_order",
            "phone": phone,
            "name": name,
            "delivery_address": address,
            "comment": comment,
            "products": json.dumps(products)
        }

        logging.info(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: {payload}")

        try:
            response = requests.post("https://app.frontpad.ru/api/index.php", data=payload)
            logging.info(f"üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad: {response.status_code}")
            logging.info(f"üì§ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad (text): {response.text}")
            try:
                json_data = response.json()
                logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad (json): {json_data}")
            except Exception:
                logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad")
        except Exception as e:
            logging.exception(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ FrontPad: {e}")

    return "ok"
