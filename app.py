import os
import json
import logging
from flask import Flask, request
import requests
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

VK_CONFIRMATION = os.getenv("VK_CONFIRMATION")
FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è SKU ‚Üí –∞—Ä—Ç–∏–∫—É–ª (–∞—Ä—Ç–∏–∫—É–ª—ã –æ—Ç 001 –¥–æ 181)
sku_to_article = {f"{i:03d}": f"{i:03d}" for i in range(1, 182)}

@app.route("/", methods=["POST"])
def vk_callback():
    data = request.get_json()
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç VK: {data}")

    if data.get("type") == "confirmation":
        return VK_CONFIRMATION

    if data.get("type") == "market_order_new":
        order = data["object"]
        items = order.get("items", [])

        if not items:
            logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
            return "ok"

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
        products = []
        for item in items:
            sku = str(item.get("item", {}).get("sku", "")).strip()
            quantity = item.get("quantity", 1)

            article = sku_to_article.get(sku)
            if article:
                products.append({
                    "article": article,
                    "quantity": quantity
                })
            else:
                logging.warning(f"‚ö†Ô∏è SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        if not products:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
            return "ok"

        # –ê–¥—Ä–µ—Å
        address_data = order.get("recipient", {}).get("address", {})
        if isinstance(address_data, str):
            address_str = address_data
        else:
            city = address_data.get("city", "")
            street = address_data.get("street", "")
            house = address_data.get("house", "")
            address_str = f"{city}, {street}, {house}".strip(", ")

        payload = {
            "secret": FRONTPAD_SECRET,
            "action": "new_order",
            "phone": order.get("recipient", {}).get("phone", ""),
            "name": order.get("recipient", {}).get("name", ""),
            "delivery_address": address_str,
            "comment": order.get("comment", ""),
            "products": products  # ‚¨ÖÔ∏è –í–ê–ñ–ù–û: –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫, –ù–ï —Å—Ç—Ä–æ–∫–∞!
        }

        logging.info(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: {payload}")

        try:
            response = requests.post("https://app.frontpad.ru/api/index.php", json=payload)
            logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad: {response.text}")
            response_data = response.json()

            if not isinstance(response_data, dict):
                logging.error("‚ùå –û—Ç–≤–µ—Ç –æ—Ç FrontPad –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ FrontPad.")
            elif response_data.get("result") != "success":
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç FrontPad: {response_data.get('error')}")
        except Exception as e:
            logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ FrontPad: {e}")

    return "ok"
