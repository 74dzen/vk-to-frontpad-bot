import os
import json
import logging
from flask import Flask, request
from dotenv import load_dotenv
import requests

load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env
VK_CONFIRMATION = os.getenv("VK_CONFIRMATION")
FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π SKU (VK) ‚Üí –∞—Ä—Ç–∏–∫—É–ª (FrontPad)
sku_to_article = {f"{i:03}": f"{i:03}" for i in range(1, 182)}

@app.route("/", methods=["POST"])
def vk_callback():
    data = request.get_json()
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç VK: {json.dumps(data, ensure_ascii=False)}")

    if "type" not in data:
        return "no_type"

    if data["type"] == "confirmation":
        return VK_CONFIRMATION

    elif data["type"] == "market_order_new":
        try:
            order_data = data.get("object", {}).get("order", {})
            if not order_data:
                logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –≤ object.order.")
                return "no_order"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
            items = order_data.get("items", [])
            if not items:
                logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
                return "no_items"

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–≤–∞—Ä—ã
            products = []
            for item in items:
                sku = str(item.get("item", {}).get("sku", "")).zfill(3)
                article = sku_to_article.get(sku)
                if not article:
                    logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π SKU: {sku}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä.")
                    continue
                quantity = item.get("quantity", 1)
                products.append({
                    "article": article,
                    "quantity": quantity
                })

            if not products:
                logging.warning("‚ö†Ô∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π.")
                return "no_valid_products"

            # –ê–¥—Ä–µ—Å
            address_data = order_data.get("address", {})
            address = ", ".join(filter(None, [
                address_data.get("country"),
                address_data.get("city"),
                address_data.get("street"),
                address_data.get("house"),
                address_data.get("block"),
                address_data.get("flat")
            ])) or "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"

            payload = {
                "secret": FRONTPAD_SECRET,
                "action": "new_order",
                "phone": order_data.get("phone", ""),
                "name": order_data.get("display_user_name", ""),
                "delivery_address": address,
                "comment": order_data.get("comment", ""),
                "products": json.dumps(products, ensure_ascii=False)
            }

            logging.info(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: {payload}")
            response = requests.post("https://app.frontpad.ru/api/index.php", data=payload)
            try:
                response_data = response.json()
                logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad: {response_data}")
                if response_data.get("result") != "success":
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç FrontPad: {response_data.get('error')}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad: {e}")
                logging.error(f"‚Ü©Ô∏è –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")

        except Exception as e:
            logging.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")

    return "ok"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
