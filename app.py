import os
import logging
from flask import Flask, request
from dotenv import load_dotenv
import requests

load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")
VK_SECRET = os.getenv("VK_SECRET")

@app.route("/", methods=["POST"])
def vk_callback():
    data = request.get_json()
    logging.info("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: %s", data)

    if data.get("type") in ["market_order_new", "market_order_edit"] and data.get("secret") == VK_SECRET:
        order = data.get("object", {})
        recipient = order.get("recipient", {})
        delivery = order.get("delivery", {})
        comment = order.get("comment", "")

        # ‚úÖ –ë–µ—Ä–µ–º preview_order_items –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ
        items = order.get("preview_order_items") or order.get("items", [])

        logging.info(f"üî¢ –ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: {len(items)}")
        logging.info(f"üßæ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤: {items}")

        phone = recipient.get("phone", "").strip()
        name = recipient.get("name", "").strip()
        address = delivery.get("address", "").strip()

        if not phone or not name or not address:
            logging.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∞–¥—Ä–µ—Å")
            return "error"

        payload = {
            "secret": FRONTPAD_SECRET,
            "phone": phone,
            "name": name,
            "delivery_address": address,
            "comment": comment
        }

        for i, item in enumerate(items):
            logging.info(f"üß© –¢–æ–≤–∞—Ä #{i}: {item}")

            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ SKU
            if isinstance(item, dict):
                item_data = item.get("item", item)
            else:
                logging.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç item: {item}")
                continue

            sku = str(item_data.get("sku", "")).strip()
            qty = int(item.get("quantity", 1))

            if not sku:
                logging.warning(f"‚ö†Ô∏è SKU –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–≤–∞—Ä–µ: {item}")
                continue

            logging.info(f"üïµÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ #{i}: sku={sku}, qty={qty}")
            payload[f"product[{i}]"] = sku
            payload[f"product_kol[{i}]"] = qty

        logging.info("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad...")

        try:
            for key, value in payload.items():
                logging.info(f"üì§ {key}: {value}")

            response = requests.post("https://app.frontpad.ru/api/index.php?new_order", data=payload)
            logging.info("üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad: %s", response.status_code)
            logging.info("üì§ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad (text): %s", response.text)

            if response.status_code == 200 and response.text != "null":
                logging.info("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤–æ FrontPad.")
            else:
                logging.error("‚ùå FrontPad –≤–µ—Ä–Ω—É–ª null. –ü—Ä–æ–≤–µ—Ä—å –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ API-–∫–ª—é—á.")

            return "ok"
        except Exception as e:
            logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ FrontPad:")
            return "error"

    return "ok"
