import logging
from flask import Flask, request
import requests
import json

app = Flask(__name__)

logging.basicConfig(level=logging.INFO)

FRONTPAD_SECRET = '–í–ê–®_–°–ï–ö–†–ï–¢_–û–¢_FRONTPAD'  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
VK_CONFIRMATION_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù_–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø'  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

# –¢–∞–±–ª–∏—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: SKU = –∞—Ä—Ç–∏–∫—É–ª (–æ—Ç 001 –¥–æ 181)
sku_to_article = {f'{i:03}': f'{i:03}' for i in range(1, 182)}

@app.route('/', methods=['POST'])
def webhook():
    data = request.get_json()
    logging.info("üì• –ü–æ–ª—É—á–µ–Ω JSON –æ—Ç –í–ö: %s", json.dumps(data, ensure_ascii=False, indent=2))

    if data.get('type') == 'confirmation':
        return VK_CONFIRMATION_TOKEN

    if data.get('type') == 'market_order_new':
        order = data['object']
        customer = order.get('recipient', {})
        name = customer.get('name', '')
        phone = customer.get('phone', '')
        address = order.get('delivery', {}).get('address', '')
        comment = order.get('comment', '')

        items_raw = order.get('preview_order_items', [])
        logging.info("üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ %d —Ç–æ–≤–∞—Ä–æ–≤", len(items_raw))

        products = []
        for item in items_raw:
            try:
                sku = item.get('item', {}).get('sku')
                quantity = item.get('quantity', 1)
                if sku:
                    article = sku_to_article.get(sku)
                    if article:
                        products.append({"article": article, "quantity": quantity})
                        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: SKU {sku} -> –∞—Ä—Ç–∏–∫—É–ª {article}")
                    else:
                        logging.warning(f"‚ùå SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤!")
                else:
                    logging.warning(f"‚ùå SKU –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–æ–≤–∞—Ä–µ: {item}")
            except Exception as e:
                logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞: %s", e)

        if not products:
            logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
            return "ok"

        payload = {
            "secret": FRONTPAD_SECRET,
            "action": "new_order",
            "phone": phone,
            "name": name,
            "delivery_address": address,
            "comment": comment,
            "products": json.dumps(products, ensure_ascii=False)
        }

        logging.info("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: %s", payload)
        response = requests.post("https://app.frontpad.ru/api/index.php", data=payload)

        logging.info("üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad: %s", response.status_code)
        logging.info("üì§ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç FrontPad (text): %s", response.text)
        try:
            response_json = response.json()
            logging.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad (json): %s", response_json)
        except Exception as e:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON: %s", e)

    return "ok"

@app.route('/', methods=['GET'])
def index():
    return "üëã –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."

