import os
import json
import logging
from flask import Flask, request
from dotenv import load_dotenv
import requests

load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

VK_CONFIRMATION = os.getenv("VK_CONFIRMATION")
FRONTPAD_SECRET = os.getenv("FRONTPAD_SECRET")

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π SKU ‚Üí –∞—Ä—Ç–∏–∫—É–ª (1:1 –æ—Ç 001 –¥–æ 181)
sku_to_article = {f"{i:03}": f"{i:03}" for i in range(1, 182)}

@app.route("/", methods=["POST"])
def vk_callback():
    data = request.get_json()
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {json.dumps(data, ensure_ascii=False)}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    if data.get("type") == "confirmation":
        logging.info("üì° –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ")
        return VK_CONFIRMATION

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    if data.get("type") == "market_order_new":
        order = data["object"]
        items = order.get("items", [])
        user = order.get("user", {})
        delivery = order.get("delivery", "")
        address = ""
        if isinstance(delivery, dict):
            address = delivery.get("address", {}).get("street", "")
        else:
            address = ""

        name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
        phone = user.get("phone", "+79999999999")
        comment = order.get("comment", "")

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–∫–∞–∑–∞
        logging.info(f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ –∏–∑ VK: {items}")

        products = []
        for item in items:
            sku = item.get("sku", "")
            quantity = item.get("quantity", 1)
            article = sku_to_article.get(sku)

            if article:
                products.append({"article": article, "quantity": quantity})
            else:
                logging.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è SKU: {sku}")

        # ‚ùå –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
        if not products:
            logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑.")
            return "ok"

        payload = {
            "secret": FRONTPAD_SECRET,
            "action": "new_order",
            "phone": phone,
            "name": name,
            "delivery_address": address or "–ß–µ–ª—è–±–∏–Ω—Å–∫",  # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            "comment": comment or "–ó–∞–∫–∞–∑ –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ",
            "products": json.dumps(products, ensure_ascii=False),
        }

        logging.info(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FrontPad: {payload}")
        try:
            response = requests.post("https://app.frontpad.ru/api/index.php", data=payload)
            response_data = response.json()
            logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç FrontPad: {response_data}")
            if response_data.get("result") != "success":
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç FrontPad: {response_data.get('error')}")
        except Exception as e:
            logging.error(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ FrontPad: {e}")

        return "ok"

    return "ok"
